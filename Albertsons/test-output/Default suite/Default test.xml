<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="0" hostname="ayaansh" failures="0" tests="2" name="Default test" time="0.087" errors="0" timestamp="2024-02-06T10:17:50 IST">
  <testcase classname="BaseMethod.demo" name="@BeforeSuite initialiseReports" time="0.146">
    <failure type="java.nio.file.InvalidPathException" message="Illegal char &amp;lt;:&amp;gt; at index 38: user.dir.\ExtentReports\06\02\2024, 10:17.html">
      <![CDATA[java.nio.file.InvalidPathException: Illegal char <:> at index 38: user.dir.\ExtentReports\06\02\2024, 10:17.html
at java.base/sun.nio.fs.WindowsPathParser.normalize(WindowsPathParser.java:204)
at java.base/sun.nio.fs.WindowsPathParser.parse(WindowsPathParser.java:175)
at java.base/sun.nio.fs.WindowsPathParser.parse(WindowsPathParser.java:77)
at java.base/sun.nio.fs.WindowsPath.parse(WindowsPath.java:92)
at java.base/sun.nio.fs.WindowsFileSystem.getPath(WindowsFileSystem.java:231)
at java.base/java.io.File.toPath(File.java:2401)
at com.aventstack.extentreports.reporter.AbstractFileReporter.<init>(AbstractFileReporter.java:40)
at com.aventstack.extentreports.reporter.ExtentSparkReporter.<init>(ExtentSparkReporter.java:51)
at BaseMethod.demo.initialiseReports(demo.java:68)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:69)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:390)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:325)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:382)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
    </failure>
  </testcase> <!-- @BeforeSuite initialiseReports -->
  <testcase classname="BaseMethod.demo" name="@BeforeTest getStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeTest getStatus -->
  <testcase classname="BaseMethod.demo" name="@BeforeMethod initialiseBrowser" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod initialiseBrowser -->
  <testcase classname="BaseMethod.demo" name="@AfterMethod tearDown" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="BaseMethod.demo" name="@BeforeMethod initialiseBrowser" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod initialiseBrowser -->
  <testcase classname="BaseMethod.demo" name="@AfterMethod tearDown" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="BaseMethod.demo" name="@AfterTest getGroupStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterTest getGroupStatus -->
  <testcase classname="BaseMethod.demo" name="test1" time="0.0">
    <skipped/>
  </testcase> <!-- test1 -->
  <testcase classname="BaseMethod.demo" name="test2" time="0.001">
    <skipped/>
  </testcase> <!-- test2 -->
</testsuite> <!-- Default test -->
